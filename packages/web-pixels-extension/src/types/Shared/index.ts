// Code generated by jtd-codegen for TypeScript v0.2.1

export type Shared = any;

/**
 * A cart represents the merchandise that a buyer intends to purchase, and the
 * estimated cost associated with the cart. To learn how to interact with a
 * cart during a customer's session, refer to [Manage a cart with the Storefront
 * API](https://shopify.dev/api/examples/cart).
 */
export interface Cart {
  /**
   * The estimated costs that the buyer will pay at checkout. The costs
   * are subject to change and changes will be reflected at checkout. The
   * `cost` field uses the `buyerIdentity` field to determine [international
   * pricing](https://shopify.dev/api/examples/international-pricing#create-
   * a-cart).
   */
  cost: CartCost;

  /**
   * A globally-unique identifier.
   */
  id: string;
  lines: CartLine[];

  /**
   * The total number of items in the cart.
   */
  totalQuantity: number;
}

/**
 * The costs that the buyer will pay at checkout.
 * It uses
 * [`CartBuyerIdentity`](https://shopify.dev/api/storefront/reference/cart/cartb
 * uyeridentity) to determine
 * [international pricing](https://shopify.dev/api/examples/international-
 * pricing#create-a-cart).
 */
export interface CartCost {
  /**
   * The total amount for the customer to pay.
   */
  totalAmount: MoneyV2;
}

/**
 * Represents information about the merchandise in the cart.
 */
export interface CartLine {
  /**
   * The cost of the merchandise that the buyer will pay for at checkout. The
   * costs are subject to change and changes will be reflected at checkout.
   */
  cost: CartLineCost;

  /**
   * The merchandise that the buyer intends to purchase.
   */
  merchandise: ProductVariant;

  /**
   * The quantity of the merchandise that the customer intends to purchase.
   */
  quantity: number;
}

/**
 * The cost of the merchandise line that the buyer will pay at checkout.
 */
export interface CartLineCost {
  /**
   * The total cost of the merchandise line.
   */
  totalAmount: MoneyV2;
}

/**
 * A container for all the information required to checkout items and pay.
 */
export interface Checkout {
  /**
   * The currency code for the checkout.
   */
  currencyCode: CurrencyCode;

  /**
   * The email attached to this checkout.
   */
  email: string;

  /**
   * A globally-unique identifier.
   */
  id: string;
  lineItems: CheckoutLineItem[];

  /**
   * The resulting order from a paid checkout.
   */
  order: Order;

  /**
   * The shipping address to where the line items will be shipped.
   */
  shippingAddress: MailingAddress;

  /**
   * Once a shipping rate is selected by the customer it is transitioned to a
   * `shipping_line` object.
   */
  shippingLine: ShippingRate;

  /**
   * The price at checkout before duties, shipping, and taxes.
   */
  subtotalPrice: MoneyV2;

  /**
   * The sum of all the prices of all the items in the checkout, including
   * duties, taxes, and discounts.
   */
  totalPrice: MoneyV2;

  /**
   * The sum of all the taxes applied to the line items and shipping lines in
   * the checkout.
   */
  totalTax: MoneyV2;
}

/**
 * A single line item in the checkout, grouped by variant and attributes.
 */
export interface CheckoutLineItem {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * The quantity of the line item.
   */
  quantity: number;

  /**
   * Title of the line item. Defaults to the product's title.
   */
  title: string;

  /**
   * Product variant of the line item.
   */
  variant: ProductVariant;
}

/**
 * A collection represents a grouping of products that a shop owner can create
 * to organize them or make their shops easier to browse.
 */
export interface Collection {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * The collectionâ€™s name. Limit of 255 characters.
   */
  title: string;
}

/**
 * The code designating a country/region, which generally follows ISO 3166-1
 * alpha-2 guidelines.
 * If a territory doesn't have a country code value in the `CountryCode` enum,
 * then it might be considered a subdivision
 * of another country. For example, the territories associated with Spain are
 * represented by the country code `ES`,
 * and the territories associated with the United States of America are
 * represented by the country code `US`.
 */
export enum CountryCode {
  Ac = 'AC',
  Ad = 'AD',
  Ae = 'AE',
  Af = 'AF',
  Ag = 'AG',
  Ai = 'AI',
  Al = 'AL',
  Am = 'AM',
  An = 'AN',
  Ao = 'AO',
  Ar = 'AR',
  At = 'AT',
  Au = 'AU',
  Aw = 'AW',
  Ax = 'AX',
  Az = 'AZ',
  Ba = 'BA',
  Bb = 'BB',
  Bd = 'BD',
  Be = 'BE',
  Bf = 'BF',
  Bg = 'BG',
  Bh = 'BH',
  Bi = 'BI',
  Bj = 'BJ',
  Bl = 'BL',
  Bm = 'BM',
  Bn = 'BN',
  Bo = 'BO',
  Bq = 'BQ',
  Br = 'BR',
  Bs = 'BS',
  Bt = 'BT',
  Bv = 'BV',
  Bw = 'BW',
  By = 'BY',
  Bz = 'BZ',
  Ca = 'CA',
  Cc = 'CC',
  Cd = 'CD',
  Cf = 'CF',
  Cg = 'CG',
  Ch = 'CH',
  Ci = 'CI',
  Ck = 'CK',
  Cl = 'CL',
  Cm = 'CM',
  Cn = 'CN',
  Co = 'CO',
  Cr = 'CR',
  Cu = 'CU',
  Cv = 'CV',
  Cw = 'CW',
  Cx = 'CX',
  Cy = 'CY',
  Cz = 'CZ',
  De = 'DE',
  Dj = 'DJ',
  Dk = 'DK',
  Dm = 'DM',
  Do = 'DO',
  Dz = 'DZ',
  Ec = 'EC',
  Ee = 'EE',
  Eg = 'EG',
  Eh = 'EH',
  Er = 'ER',
  Es = 'ES',
  Et = 'ET',
  Fi = 'FI',
  Fj = 'FJ',
  Fk = 'FK',
  Fo = 'FO',
  Fr = 'FR',
  Ga = 'GA',
  Gb = 'GB',
  Gd = 'GD',
  Ge = 'GE',
  Gf = 'GF',
  Gg = 'GG',
  Gh = 'GH',
  Gi = 'GI',
  Gl = 'GL',
  Gm = 'GM',
  Gn = 'GN',
  Gp = 'GP',
  Gq = 'GQ',
  Gr = 'GR',
  Gs = 'GS',
  Gt = 'GT',
  Gw = 'GW',
  Gy = 'GY',
  Hk = 'HK',
  Hm = 'HM',
  Hn = 'HN',
  Hr = 'HR',
  Ht = 'HT',
  Hu = 'HU',
  Id = 'ID',
  Ie = 'IE',
  Il = 'IL',
  Im = 'IM',
  In = 'IN',
  Io = 'IO',
  Iq = 'IQ',
  Ir = 'IR',
  Is = 'IS',
  It = 'IT',
  Je = 'JE',
  Jm = 'JM',
  Jo = 'JO',
  Jp = 'JP',
  Ke = 'KE',
  Kg = 'KG',
  Kh = 'KH',
  Ki = 'KI',
  Km = 'KM',
  Kn = 'KN',
  Kp = 'KP',
  Kr = 'KR',
  Kw = 'KW',
  Ky = 'KY',
  Kz = 'KZ',
  La = 'LA',
  Lb = 'LB',
  Lc = 'LC',
  Li = 'LI',
  Lk = 'LK',
  Lr = 'LR',
  Ls = 'LS',
  Lt = 'LT',
  Lu = 'LU',
  Lv = 'LV',
  Ly = 'LY',
  Ma = 'MA',
  Mc = 'MC',
  Md = 'MD',
  Me = 'ME',
  Mf = 'MF',
  Mg = 'MG',
  Mk = 'MK',
  Ml = 'ML',
  Mm = 'MM',
  Mn = 'MN',
  Mo = 'MO',
  Mq = 'MQ',
  Mr = 'MR',
  Ms = 'MS',
  Mt = 'MT',
  Mu = 'MU',
  Mv = 'MV',
  Mw = 'MW',
  Mx = 'MX',
  My = 'MY',
  Mz = 'MZ',
  Na = 'NA',
  Nc = 'NC',
  Ne = 'NE',
  Nf = 'NF',
  Ng = 'NG',
  Ni = 'NI',
  Nl = 'NL',
  No = 'NO',
  Np = 'NP',
  Nr = 'NR',
  Nu = 'NU',
  Nz = 'NZ',
  Om = 'OM',
  Pa = 'PA',
  Pe = 'PE',
  Pf = 'PF',
  Pg = 'PG',
  Ph = 'PH',
  Pk = 'PK',
  Pl = 'PL',
  Pm = 'PM',
  Pn = 'PN',
  Ps = 'PS',
  Pt = 'PT',
  Py = 'PY',
  Qa = 'QA',
  Re = 'RE',
  Ro = 'RO',
  Rs = 'RS',
  Ru = 'RU',
  Rw = 'RW',
  Sa = 'SA',
  Sb = 'SB',
  Sc = 'SC',
  Sd = 'SD',
  Se = 'SE',
  Sg = 'SG',
  Sh = 'SH',
  Si = 'SI',
  Sj = 'SJ',
  Sk = 'SK',
  Sl = 'SL',
  Sm = 'SM',
  Sn = 'SN',
  So = 'SO',
  Sr = 'SR',
  Ss = 'SS',
  St = 'ST',
  Sv = 'SV',
  Sx = 'SX',
  Sy = 'SY',
  Sz = 'SZ',
  Ta = 'TA',
  Tc = 'TC',
  Td = 'TD',
  Tf = 'TF',
  Tg = 'TG',
  Th = 'TH',
  Tj = 'TJ',
  Tk = 'TK',
  Tl = 'TL',
  Tm = 'TM',
  Tn = 'TN',
  To = 'TO',
  Tr = 'TR',
  Tt = 'TT',
  Tv = 'TV',
  Tw = 'TW',
  Tz = 'TZ',
  Ua = 'UA',
  Ug = 'UG',
  Um = 'UM',
  Us = 'US',
  Uy = 'UY',
  Uz = 'UZ',
  Va = 'VA',
  Vc = 'VC',
  Ve = 'VE',
  Vg = 'VG',
  Vn = 'VN',
  Vu = 'VU',
  Wf = 'WF',
  Ws = 'WS',
  Xk = 'XK',
  Ye = 'YE',
  Yt = 'YT',
  Za = 'ZA',
  Zm = 'ZM',
  Zw = 'ZW',
  Zz = 'ZZ',
}

/**
 * The three-letter currency codes that represent the world currencies used in
 * stores. These include standard ISO 4217 codes, legacy codes,
 * and non-standard codes.
 */
export enum CurrencyCode {
  Aed = 'AED',
  Afn = 'AFN',
  All = 'ALL',
  Amd = 'AMD',
  Ang = 'ANG',
  Aoa = 'AOA',
  Ars = 'ARS',
  Aud = 'AUD',
  Awg = 'AWG',
  Azn = 'AZN',
  Bam = 'BAM',
  Bbd = 'BBD',
  Bdt = 'BDT',
  Bgn = 'BGN',
  Bhd = 'BHD',
  Bif = 'BIF',
  Bmd = 'BMD',
  Bnd = 'BND',
  Bob = 'BOB',
  Brl = 'BRL',
  Bsd = 'BSD',
  Btn = 'BTN',
  Bwp = 'BWP',
  Byn = 'BYN',
  Byr = 'BYR',
  Bzd = 'BZD',
  Cad = 'CAD',
  Cdf = 'CDF',
  Chf = 'CHF',
  Clp = 'CLP',
  Cny = 'CNY',
  Cop = 'COP',
  Crc = 'CRC',
  Cve = 'CVE',
  Czk = 'CZK',
  Djf = 'DJF',
  Dkk = 'DKK',
  Dop = 'DOP',
  Dzd = 'DZD',
  Egp = 'EGP',
  Ern = 'ERN',
  Etb = 'ETB',
  Eur = 'EUR',
  Fjd = 'FJD',
  Fkp = 'FKP',
  Gbp = 'GBP',
  Gel = 'GEL',
  Ghs = 'GHS',
  Gip = 'GIP',
  Gmd = 'GMD',
  Gnf = 'GNF',
  Gtq = 'GTQ',
  Gyd = 'GYD',
  Hkd = 'HKD',
  Hnl = 'HNL',
  Hrk = 'HRK',
  Htg = 'HTG',
  Huf = 'HUF',
  Idr = 'IDR',
  Ils = 'ILS',
  Inr = 'INR',
  Iqd = 'IQD',
  Irr = 'IRR',
  Isk = 'ISK',
  Jep = 'JEP',
  Jmd = 'JMD',
  Jod = 'JOD',
  Jpy = 'JPY',
  Kes = 'KES',
  Kgs = 'KGS',
  Khr = 'KHR',
  Kid = 'KID',
  Kmf = 'KMF',
  Krw = 'KRW',
  Kwd = 'KWD',
  Kyd = 'KYD',
  Kzt = 'KZT',
  Lak = 'LAK',
  Lbp = 'LBP',
  Lkr = 'LKR',
  Lrd = 'LRD',
  Lsl = 'LSL',
  Ltl = 'LTL',
  Lvl = 'LVL',
  Lyd = 'LYD',
  Mad = 'MAD',
  Mdl = 'MDL',
  Mga = 'MGA',
  Mkd = 'MKD',
  Mmk = 'MMK',
  Mnt = 'MNT',
  Mop = 'MOP',
  Mru = 'MRU',
  Mur = 'MUR',
  Mvr = 'MVR',
  Mwk = 'MWK',
  Mxn = 'MXN',
  Myr = 'MYR',
  Mzn = 'MZN',
  Nad = 'NAD',
  Ngn = 'NGN',
  Nio = 'NIO',
  Nok = 'NOK',
  Npr = 'NPR',
  Nzd = 'NZD',
  Omr = 'OMR',
  Pab = 'PAB',
  Pen = 'PEN',
  Pgk = 'PGK',
  Php = 'PHP',
  Pkr = 'PKR',
  Pln = 'PLN',
  Pyg = 'PYG',
  Qar = 'QAR',
  Ron = 'RON',
  Rsd = 'RSD',
  Rub = 'RUB',
  Rwf = 'RWF',
  Sar = 'SAR',
  Sbd = 'SBD',
  Scr = 'SCR',
  Sdg = 'SDG',
  Sek = 'SEK',
  Sgd = 'SGD',
  Shp = 'SHP',
  Sll = 'SLL',
  Sos = 'SOS',
  Srd = 'SRD',
  Ssp = 'SSP',
  Std = 'STD',
  Stn = 'STN',
  Syp = 'SYP',
  Szl = 'SZL',
  Thb = 'THB',
  Tjs = 'TJS',
  Tmt = 'TMT',
  Tnd = 'TND',
  Top = 'TOP',
  Try = 'TRY',
  Ttd = 'TTD',
  Twd = 'TWD',
  Tzs = 'TZS',
  Uah = 'UAH',
  Ugx = 'UGX',
  Usd = 'USD',
  Uyu = 'UYU',
  Uzs = 'UZS',
  Ved = 'VED',
  Vef = 'VEF',
  Ves = 'VES',
  Vnd = 'VND',
  Vuv = 'VUV',
  Wst = 'WST',
  Xaf = 'XAF',
  Xcd = 'XCD',
  Xof = 'XOF',
  Xpf = 'XPF',
  Xxx = 'XXX',
  Yer = 'YER',
  Zar = 'ZAR',
  Zmw = 'ZMW',
}

/**
 * A customer represents a customer account with the shop. Customer accounts
 * store contact information for the customer, saving logged-in customers the
 * trouble of having to provide it at every checkout.
 */
export interface Customer {
  /**
   * The customerâ€™s email address.
   */
  email: string;

  /**
   * A unique identifier for the customer.
   */
  id: string;

  /**
   * The customerâ€™s phone number.
   */
  phone: string;
}

/**
 * Represents an image resource.
 */
export interface Image {
  /**
   * The location of the image as a URL.
   */
  src: string;
}

/**
 * Represents a mailing address for customers and shipping.
 */
export interface MailingAddress {
  /**
   * The name of the city, district, village, or town.
   */
  city: string;

  /**
   * The name of the country.
   */
  country: string;

  /**
   * The two-letter code for the country of the address.
   *
   * For example, US.
   */
  countryCode: CountryCode;

  /**
   * A unique phone number for the customer.
   *
   * Formatted using E.164 standard. For example, _+16135551111_.
   */
  phone: string;

  /**
   * The region of the address, such as the province, state, or district.
   */
  province: string;

  /**
   * The two-letter code for the region.
   *
   * For example, ON.
   */
  provinceCode: string;
}

/**
 * A monetary value with currency.
 */
export interface MoneyV2 {
  /**
   * Decimal money amount.
   */
  amount: number;

  /**
   * Currency of the money.
   */
  currencyCode: CurrencyCode;
}

/**
 * An order is a customerâ€™s completed request to purchase one or more products
 * from a shop. An order is created when a customer completes the checkout
 * process, during which time they provides an email address, billing address
 * and payment information.
 */
export interface Order {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * Unique identifier for the order that appears on the order.
   * For example, _#1000_ or _Store1001.
   */
  name: string;

  /**
   * A unique numeric identifier for the order for use by shop owner and
   * customer.
   */
  orderNumber: number;
}

/**
 * A product represents an individual item for sale in a Shopify store. Products
 * are often physical, but they don't have to be.
 * For example, a digital download (such as a movie, music or ebook file) also
 * qualifies as a product, as do services (such as equipment rental, work for
 * hire, customization of another product or an extended warranty).
 */
export interface Product {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * The productâ€™s title.
   */
  title: string;

  /**
   * The productâ€™s vendor name.
   */
  vendor: string;
}

/**
 * A product variant represents a different version of a product, such as
 * differing sizes or differing colors.
 */
export interface ProductVariant {
  /**
   * A globally-unique identifier.
   */
  id: string;

  /**
   * Image associated with the product variant. This field falls back to the
   * product image if no image is available.
   */
  image: Image;

  /**
   * The product variantâ€™s price.
   */
  price: MoneyV2;

  /**
   * The product object that the product variant belongs to.
   */
  product: Product;

  /**
   * The SKU (stock keeping unit) associated with the variant.
   */
  sku: string;

  /**
   * The product variantâ€™s title.
   */
  title: string;
}

/**
 * A shipping rate to be applied to a checkout.
 */
export interface ShippingRate {
  /**
   * Price of this shipping rate.
   */
  price: MoneyV2;
}
